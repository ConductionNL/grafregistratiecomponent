name: Helm Install

on: 
    repository_dispatch:
        types: [start-install-workflow]

jobs:
    install:
        
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v1
            - name: Setting APP_NAME
              run: |
                  export NAME=$(grep APP_NAME= .env | cut -d '=' -f2)
                  echo ::set-env name=APP_NAME::$NAME
            - name: Set APP_ENV
              run: |
                  export ENV=${{ github.event.client_payload.environment }}
                  echo ::set-env name=APP_ENV::$ENV
            - name: disable debugging
              run: echo ::set-env name=DEBUG::0
            - name: enable debugging 
              if: github.event.client_payload.environment == 'dev'
              run: echo ::set-env name=DEBUG::1
            - name: Set APP_DOMAINS
              run: |
                  export DOMAINS=${{ github.event.client_payload.domains }}
                  echo ::set-env name=APP_DOMAINS::$DOMAINS
            - name: Set DB_URL
              run: |
                  export DBURL=${{ github.event.client_payload.dburl }}
                  echo ::set-env name=DB_URL::$DBURL
            # Het volgende moeten we misschien naar de secrets verkassen
            - name: Set AUTH_KEY
              run: |
                  export AUTHKEY=${{ github.event.client_payload.dburl }}
                  echo ::set-env name=AUTH_KEY::$AUTHKEY
            - name: Print variables
              run: |
                  printf "APP_NAME: \t\t $APP_NAME\nAPP_ENV: \t\t $APP_ENV\nDEBUG: \t\t $DEBUG\nAPP_DOMAINS: \t\t $APP_DOMAINS\nDB_URL: \t\t $DB_URL\nAUTH_KEY: \t\t $AUTH_KEY"
            - name: Create kube config
              uses: finnp/create-file-action@master
              env:
              FILE_NAME: "kubeconfig.yaml"
              FILE_DATA: ${{ github.event.client_payload.kubeconfig }}
            - name: Set correct helm version
              if: (contains( github.ref, 'master' ) || contains( github.ref, 'staging' ) || contains( github.ref, 'development' )) && steps.kubeconfig.outputs.success == 'true'
              run: helm init --upgrade --kubeconfig="kubeconfig.yaml"  
            - name: Helm Install
              run: |
                  helm install $APP_NAME-$APP_ENV ./api/helm --namespace=$APP_ENV --kubeconfig=./kubeconfig.yaml --set settings.debug=$DEBUG,settings.env=$APP_ENV,settings.domains=$APP_DOMAINS,postgresql.enabled=false,postgresql.url=$DB_URL
